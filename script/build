#!/usr/bin/env bash

# This script must be run within the ClojureScript top-level project
# directory.

set -euo pipefail

if [ $# -ge 1 ] && [ "$1" == "uberjar" ]; then
    BUILD=UBERJAR
else
    BUILD=CLJS
fi

log() {
    echo -e "\n[INFO] $(date +"%Y-%m-%d %H:%M:%S") $(basename $0) - $@"
}

{ log "building $BUILD"; } 2> /dev/null

if [[ -z "${CLJS_SCRIPT_QUIET-}" ]]; then
  set -x
fi

PROJECT_ROOT_DIR=$(cd $(dirname $0)/.. && pwd)

# The command `git describe --match v0.0` will return a string like
#
# v0.0-856-g329708b
#
# where 856 is the number of commits since the v0.0 tag. It will always
# find the v0.0 tag and will always return the total number of commits (even
# if the tag is v0.0.1).
MAJOR="1"
MINOR="10"
REVISION=`git --no-replace-objects describe --match v$MAJOR.$MINOR`

# Extract the version number from the string.
REVISION_REGEX="v[0-9]*\.[0-9]*-([0-9]*)-.*"
if [[ $REVISION =~ $REVISION_REGEX ]]
then
  REVISION="${BASH_REMATCH[1]}"
fi

if [ $BUILD == CLJS ]; then
    rm -rf target
    CLJS_SCRIPT_MVN_OPTS=${CLJS_SCRIPT_MVN_OPTS:-""}
    sed -e s/CLOJURESCRIPT_VERSION/$MAJOR.$MINOR.$REVISION/ < pom.template.xml > pom.xml
fi

from_clean_build_work_dir() {
    # We embed cljs version in specific sources. To avoid polluting version
    # control with these changes, we build src from a clean build directory.
    local build_work_dir=$PROJECT_ROOT_DIR/builds/work-dir
    rm -rf $build_work_dir
    mkdir -p $build_work_dir
    # copy over everything necessary to build
    cp -a pom*.xml project.clj src resources $build_work_dir
    # lein uberjar expects .git to sit alongside project.clj for:
    # - population of pom.xml scm
    # - updating of revision in pom.properties
    cp -a $PROJECT_ROOT_DIR/.git $build_work_dir
    # lein uberjar will include readmes and licenses that sit alongside project.clj
    find $PROJECT_ROOT_DIR -type f -maxdepth 1 \
         \( -iname "readme*" -o -iname "license*" \) \
         -exec cp -p {} $build_work_dir \;
    cd $build_work_dir
}

sed_file() {
    # in place sed that works for both macOS and linux
    local search=$1
    local replace=$2
    local file=$3
    local tmp=`mktemp /tmp/$(basename $file).XXXXXXXXXXX`
    sed -e "s/$search/$replace/" $file > $tmp
    mv $tmp $file
}

{ log "setting up clean build dir"; } 2> /dev/null
from_clean_build_work_dir

{ log "adjusting versions"; } 2> /dev/null
sed_file '^.def ^:dynamic \*clojurescript-version\*.*$' \
         '(def ^:dynamic *clojurescript-version* {:major '"$MAJOR"', :minor '"$MINOR"', :qualifier '"$REVISION"'})' \
         src/main/clojure/cljs/util.cljc

sed_file '^.def \*clojurescript-version\*.*$' \
         '(def *clojurescript-version* '\""$MAJOR.$MINOR.$REVISION"\"')' \
         src/main/cljs/cljs/core.cljs

{ log "building aot_core"; } 2> /dev/null
$PROJECT_ROOT_DIR/script/aot_core

if [ $BUILD == CLJS ]; then
    # For Hudson server
    if [ "${HUDSON-}" = "true" ]; then
        TAG=r$MAJOR.$MINOR.$REVISION
        { log "on hudson - building cljs staging release"; } 2> /dev/null
        mvn --fail-at-end -Psonatype-oss-release ${CLJS_SCRIPT_MVN_OPTS-} \
            clean deploy nexus-staging:release

        { log "Creating tag $TAG"; } 2> /dev/null
        git tag -f "$TAG"
        git push origin "$TAG"
    else
        { log "not on hudson - building cljs locally"; } 2> /dev/null
        mvn ${CLJS_SCRIPT_MVN_OPTS-} clean install
    fi
else
    { log "building cljs.jar uberjar"; } 2> /dev/null
    lein uberjar
    mkdir -p $PROJECT_ROOT_DIR/target
    mv target/clojurescript-0.0-SNAPSHOT-standalone.jar $PROJECT_ROOT_DIR/target/cljs.jar
fi
{ log "done"; } 2> /dev/null
